@page
@using System.Net
@using System.Text
@using System.IO
@using Microsoft.AspNetCore.Http
@using SilverBotDS.Objects
@using DSharpPlus
@using System.Diagnostics
@using SilverBotDS.WebHelpers
@using SilverBotDS
@inject Config config
@inject IHttpContextAccessor HttpContextAccessor
@inject DiscordClient Discord
@model SilverBotDS.Pages.ListGuildsModel

@{
    if (string.IsNullOrEmpty(SessionHelper.GetObjectFromJson<string>(HttpContextAccessor.HttpContext.Session, "accessToken")))
    {
        Response.Redirect($"https://{Request.Host}/login");
    }
    else
    {

        HttpWebRequest webRequest1 = (HttpWebRequest)WebRequest.Create("https://discordapp.com/api/users/@me");
        webRequest1.Method = "Get";
        webRequest1.ContentLength = 0;
        webRequest1.Headers.Add("Authorization", $"Bearer {SessionHelper.GetObjectFromJson<string>(HttpContextAccessor.HttpContext.Session, "accessToken")}");
        webRequest1.ContentType = "application/x-www-form-urlencoded";
        string apiResponse1;
        using (HttpWebResponse response1 = webRequest1.GetResponse() as HttpWebResponse)
        {
            StreamReader reader1 = new StreamReader(response1.GetResponseStream());
            apiResponse1 = reader1.ReadToEnd();
        }
        var thing = System.Text.Json.JsonSerializer.Deserialize<SilverBotDS.Objects.Classes.Oauth.Oauththingy>(apiResponse1);
        ViewData["Message"] = $"Hello {thing.Username}#{thing.Discriminator}!";
        HttpWebRequest webRequest2 = (HttpWebRequest)WebRequest.Create("https://discordapp.com/api/v8/users/@me/guilds");
        webRequest2.Method = "Get";
        webRequest2.ContentLength = 0;
        webRequest2.Headers.Add("Authorization", $"Bearer {SessionHelper.GetObjectFromJson<string>(HttpContextAccessor.HttpContext.Session, "accessToken")}");
        webRequest2.ContentType = "application/x-www-form-urlencoded";
        string apiResponse2 = "";
        using (HttpWebResponse response2 = webRequest2.GetResponse() as HttpWebResponse)
        {
            StreamReader reader2 = new StreamReader(response2.GetResponseStream());
            apiResponse2 = reader2.ReadToEnd();
        }
        var serversbitch = System.Text.Json.JsonSerializer.Deserialize<SilverBotDS.Objects.Classes.Oauth.Guild[]>(apiResponse2);
        StringBuilder html_shit = new("<table><tr>");
        int epicness = 0;
        var servers = from server in serversbitch where Discord.Guilds.ContainsKey(server.UId) && ((Discord.Guilds[server.UId].GetMemberAsync(thing.UId).GetAwaiter().GetResult()).Roles.Any(e => e.CheckPermission(Permissions.ManageGuild) == PermissionLevel.Allowed) || server.Owner) select server;
        foreach (var server in servers)
        {
            if (epicness > 6)
            {
                epicness = 0;
                html_shit.Append("</tr><tr>");
            }
            html_shit.Append($"<td style =\"max-width:150px; max-height:150px;\"><a onclick=\"alert('id is {server.Id}')\">");
            if (string.IsNullOrEmpty(server.Icon))
            {
                var split_name = server.Name.Split(' ');
                StringBuilder sb = new StringBuilder();
                foreach (string s in split_name)
                {
                    sb.Append(s[0]);
                }
                html_shit.Append($"<div style=\"text-align:center; width: 100px; height: 100px; border: 1px solid #000; background-color: #000; display: flex; justify-content: center; align-items: center;\"><p style=\"color:white; font-size: 30px; font-family: Whitney,Helvetica Neue,Helvetica,Arial,sans-serif;\">{sb.ToString()}</p></div>");
            }
            else
            {
                html_shit.Append($"<img height=\"100\" width=\"100\" src=\"https://cdn.discordapp.com/icons/{server.Id}/{server.Icon}.png\" alt=\"{server.Name}'s image\">");
            }
            html_shit.Append($"<p>{server.Name}</p></a></td>");
            epicness++;
        }
        html_shit.Append("</tr></table>");
        ViewData["Table"] = html_shit.ToString();
    }
}
<h1>@ViewData["Message"]</h1>
@Html.Raw(ViewData["Table"])