@page "/musiccontrols"
@using System.Net
@using System.Text
@using System.IO
@using Microsoft.AspNetCore.Http
@using SilverBotDS.Objects
@using DSharpPlus
@using DSharpPlus.Entities
@using System.Diagnostics
@using SilverBotDS.WebHelpers
@using SilverBotDS
@using Microsoft.JSInterop
@using Lavalink4NET
@using SilverBotDS.Objects.Classes
@using SilverBotDS.Converters
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager uriHelper
@using System.Threading
@using Lavalink4NET.Events
@inject Config config
@{
    if (!config.UseLavaLink)
    {
        uriHelper.NavigateTo("/", forceLoad: true);
    }
    if (string.IsNullOrEmpty(SessionHelper.GetObjectFromJson<string>(HttpContextAccessor.HttpContext.Session, "accessToken")))
    {
        uriHelper.NavigateTo("/login", forceLoad: true);
    }
}
@inject DiscordClient Discord
@inject IJSRuntime jsRuntime
@inject LavalinkNode Lavalink
@{
    DiscordUser user = Discord.GetUserAsync(SessionHelper.GetUserInfoFromSession(HttpContextAccessor.HttpContext.Session).UId).GetAwaiter().GetResult();
    var djattribute = new RequireDJAttribute();
}
@foreach (var guild in Discord.Guilds.Values.Where(x => x.Members.ContainsKey(user.Id) && x.Members[user.Id].VoiceState is not null && x.Members[user.Id].VoiceState.Channel is not null && Lavalink.HasPlayer(x.Id) && Lavalink.GetPlayer<BetterVoteLavalinkPlayer>(x.Id).VoiceChannelId == x.Members[user.Id].VoiceState.Channel.Id))
{

    async Task ToggleStatePress(BetterVoteLavalinkPlayer player)
    {
        if (player.State is Lavalink4NET.Player.PlayerState.Paused)
        {

            await player.ResumeAsync();
            player.TriggerWebsiteEvent(user, "resumed the player");
        }
        else if (player.State is Lavalink4NET.Player.PlayerState.Playing)
        {
            await player.PauseAsync();
            player.TriggerWebsiteEvent(user, "paused the player");
        }

    }
    async Task VoteSkipPress(BetterVoteLavalinkPlayer player)
    {
        var votestatus = await player.VoteAsync(user.Id);
        //TO:DO possibly tell user count of people that voted or if the song was skipped
    }
    async Task ForceSkipPress(BetterVoteLavalinkPlayer player)
    {
        await player.SkipAsync();
        player.TriggerWebsiteEvent(user, "skipped a song");
    }
    void ShufflePress(BetterVoteLavalinkPlayer player)
    {
        player.Queue.Shuffle();
        player.TriggerWebsiteEvent(user, "shuffled the playlist");
    }
    void NotLoopingPress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.NotLooping;
        player.TriggerWebsiteEvent(user, "disabled looping");
    }
    void LoopingSongPress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.LoopingSong;
        player.TriggerWebsiteEvent(user, "enabled song looping");
    }
    void LoopingQueuePress(BetterVoteLavalinkPlayer player)
    {
        player.LoopSettings = LoopSettings.LoopingQueue;
        player.TriggerWebsiteEvent(user, "enabled queue looping");
    }
    string ToggleStateText = "Resume / Pause";
    BetterVoteLavalinkPlayer player = Lavalink.GetPlayer<BetterVoteLavalinkPlayer>(guild.Id);
    player.OnWebsiteEvent += async (refr, tpl) => { await InvokeAsync(() => { StateHasChanged(); }); };
    player.OnNewTrack += async (refr, song) => { await InvokeAsync(() => { StateHasChanged(); }); };
    if (player.State is Lavalink4NET.Player.PlayerState.Paused)
    {
        ToggleStateText = "▶️";
    }
    else if (player.State is Lavalink4NET.Player.PlayerState.Playing)
    {
        ToggleStateText = "⏸";
    }
    <div class="window" style="max-width: 610px">
        <div class="title-bar">
            <div class="title-bar-text">@guild.Members[user.Id].VoiceState.Channel.Name in @guild.Name</div>
            <div class="title-bar-controls">
                <button aria-label="Close"></button>
            </div>
        </div>
        <div class="window-body">
            <p>Currently playing: <a target="_blank" href="@(player.CurrentTrack is null ? "https://www.youtube.com/watch?v=dQw4w9WgXcQ": player.CurrentTrack.Source)"><strong>@(player.CurrentTrack is null ? "nothing": player.CurrentTrack.Title)</strong></a></p>
            <input id="ToggleState" type="button" @onclick="@(async (e) => { await ToggleStatePress(player); if (player.State is Lavalink4NET.Player.PlayerState.Paused) { ToggleStateText = "▶️"; } else if (player.State is Lavalink4NET.Player.PlayerState.Playing) { ToggleStateText = "⏸";} })" value="@ToggleStateText" runat="server" /><!--Play or Pause-->
            <input id="VoteSkip" type="button" @onclick="@(async (e) => await VoteSkipPress(player))" value="VoteSkip" />
            @if (guild.Members[user.Id].Roles.Any(e => e.CheckPermission(DSharpPlus.Permissions.ManageChannels) == DSharpPlus.PermissionLevel.Allowed || e.Name.ToLower().Contains("dj")) || (guild.Members[user.Id].VoiceState.Channel.Users.LongCount(x => !x.IsBot) == 1))
            {
                <input id="ForceSkip" type="button" @onclick="@(async(e) => await ForceSkipPress(player))" value="Just skip it™ (DJ only)" /><!--Requires dj-->
                <input id="Shuffle" type="button" @onclick="@(e =>  ShufflePress(player))" value="🔀Shuffle" /> <!--Requires dj-->
            }
            <input id="NoLoop" type="button" @onclick="@(e =>  NotLoopingPress(player))" value="Do not loop" />
            <input id="LoopSong" type="button" @onclick="@(e =>  LoopingSongPress(player))" value="Loop song" />
            <input id="LoopQueue" type="button" @onclick="@(e => LoopingQueuePress(player))" value="Loop queue" />
        </div>
    </div>
}